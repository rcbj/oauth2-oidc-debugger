version: '3'
services:
  postgres:
    image: postgres:17
    hostname: postgres
    network_mode: "host" 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      POSTGRES_DB: keycloak
    healthcheck:
      test: pg_isready
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 45s
  keycloak:
    image: quay.io/keycloak/keycloak:26.1.4
    command: ["start-dev"]
    hostname: keycloak
    network_mode: "host"
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://localhost:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: keycloak
      KEYCLOAK_ADMIN_PASSWORD: keycloak
      KC_HEALTH_ENABLED: "true"
    healthcheck:
      test: [
        "CMD-SHELL",
        "exec 3<>/dev/tcp/localhost/9000; \
        echo -en 'GET /health/ready' >&3; \
        # Give the server a moment to respond, then search for 'UP'
        if timeout 3 cat <&3 | grep -m 1 'UP'; then \
          exec 3<&-; exec 3>&-; exit 0; \
        else \
          exec 3<&-; exec 3>&-; exit 1; \
        fi"
      ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
  api:
    container_name: api
    hostname: api
    image: rcbj/api
    network_mode: "host"
    environment:
      - CONFIG_FILE=./env/local.js
    build:
      context: .
      dockerfile: api/Dockerfile
      args:
        CONFIG_FILE: ${CONFIG_FILE}
    depends_on:
      keycloak:
        condition: service_healthy
    healthcheck:
      test: curl -X GET http://localhost:4000
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      - keycloak
  client:
    container_name: client
    hostname: client
    image: rcbj/client
    network_mode: "host"
    environment:
      - CONFIG_FILE=./env/local.js
    build:
      context: .
      dockerfile: client/Dockerfile 
      args:
        CONFIG_FILE: ${CONFIG_FILE}
    healthcheck:
      test: curl -X GET http://localhost:3000
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
     keycloak:
        condition: service_healthy

volumes:
  postgres_data:
